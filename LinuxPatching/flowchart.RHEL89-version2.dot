digraph my_graph {
bgcolor="white"
node [fontname="courier"]

LStart_run_pre_patch_checks [shape=ellipse] [label="Start"] [type="START"] [style=filled fillcolor="#0B2447" fontcolor=white]
L2 [shape=rect] [label="self.log('Starting pre-patch checks...')
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L5 [shape=diamond] [label="not self.load_config()"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
L6 [shape=rect] [label="self.log('Failed to load configurations. Exiting.')
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L7 [shape=ellipse] [label="False"] [type="RETURN"] [style=filled fillcolor="#BAD7E9" fontcolor=black]
L10 [shape=diamond] [label="not self.setup_logging_and_output_paths()"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
L11 [shape=rect] [label="self.log('Failed to set up logging and output paths. Exiting.')
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L12 [shape=ellipse] [label="False"] [type="RETURN"] [style=filled fillcolor="#BAD7E9" fontcolor=black]
L15 [shape=diamond] [label="not self.check_disk_space()"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
L16 [shape=rect] [label="self.log('Disk space check failed. Exiting.')
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L17 [shape=ellipse] [label="False"] [type="RETURN"] [style=filled fillcolor="#BAD7E9" fontcolor=black]
L20 [shape=rect] [label="os_type = self.identify_os()
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L21 [shape=diamond] [label="os_type == 'Unknown'"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
L22 [shape=rect] [label="self.log('Failed to identify OS type. Exiting.')
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L23 [shape=ellipse] [label="False"] [type="RETURN"] [style=filled fillcolor="#BAD7E9" fontcolor=black]
L26 [shape=rect] [label="instance_id = self.get_instanceId()
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L27 [shape=diamond] [label="instance_id == 'Unknown'"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
L28 [shape=rect] [label="self.log('Failed to fetch instance ID. Exiting.')
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L29 [shape=ellipse] [label="False"] [type="RETURN"] [style=filled fillcolor="#BAD7E9" fontcolor=black]
L32 [shape=rect] [label="kernel_packages = self.get_kernelPackages()
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L33 [shape=diamond] [label="kernel_packages is None"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
L34 [shape=rect] [label="self.log('Failed to fetch kernel packages. Exiting.')
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L35 [shape=ellipse] [label="False"] [type="RETURN"] [style=filled fillcolor="#BAD7E9" fontcolor=black]
L38 [shape=rect] [label="available_kernels = self.get_available_kernels()
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L39 [shape=diamond] [label="not available_kernels"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
L40 [shape=rect] [label="self.log('Failed to fetch available kernels. Exiting.')
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L41 [shape=ellipse] [label="False"] [type="RETURN"] [style=filled fillcolor="#BAD7E9" fontcolor=black]
L44 [shape=rect] [label="new_kernel_version = self.get_newKernelVersion()
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L45 [shape=diamond] [label="new_kernel_version is None"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
L46 [shape=rect] [label="self.log('Failed to fetch new kernel version. Exiting.')
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L47 [shape=ellipse] [label="False"] [type="RETURN"] [style=filled fillcolor="#BAD7E9" fontcolor=black]
L50 [shape=rect] [label="crowdstrike_version = self.get_crowdstrikeVersion()
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L51 [shape=diamond] [label="crowdstrike_version == 'CrowdStrike not installed' or crowdstrike_version == 'CrowdStrike error'"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
L52 [shape=rect] [label="self.log('Failed to fetch CrowdStrike version. Exiting.')
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L53 [shape=ellipse] [label="False"] [type="RETURN"] [style=filled fillcolor="#BAD7E9" fontcolor=black]
L56 [shape=rect] [label="rfm_state = self.get_rfmState()
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L57 [shape=diamond] [label="rfm_state == 'Error'"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
L58 [shape=rect] [label="self.log('Failed to fetch RFM state. Exiting.')
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L59 [shape=ellipse] [label="False"] [type="RETURN"] [style=filled fillcolor="#BAD7E9" fontcolor=black]
L61 [shape=rect] [label="self.log('Pre-patch checks completed successfully.')
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L62 [shape=ellipse] [label="True"] [type="RETURN"] [style=filled fillcolor="#BAD7E9" fontcolor=black]
L999999 [shape=ellipse] [label="End"] [type="END"] [style=filled fillcolor="#F45050" fontcolor=white]

subgraph cluster_run_pre_patch_checks {
label = "def run_pre_patch_checks(self)";

LStart_run_pre_patch_checks -> L2    [source="@current_to_next"]
L2 -> L5    [source="@current_to_next"]
L5 -> L6 [color=green] [fontcolor=green] [label="true"] [source="@if_to_next_node"]
L6 -> L7    [source="@current_to_next"]
L7 -> L999999    [source="@return_to_end"]
L5 -> L10 [color=red] [fontcolor=red] [label="false"] [source="@if_to_prev_sibling"]
L10 -> L11 [color=green] [fontcolor=green] [label="true"] [source="@if_to_next_node"]
L11 -> L12    [source="@current_to_next"]
L12 -> L999999    [source="@return_to_end"]
L10 -> L15 [color=red] [fontcolor=red] [label="false"] [source="@if_to_prev_sibling"]
L15 -> L16 [color=green] [fontcolor=green] [label="true"] [source="@if_to_next_node"]
L15 -> L20 [color=red] [fontcolor=red] [label="false"] [source="@if_to_next_sibling"]
L16 -> L17    [source="@current_to_next"]
L17 -> L999999    [source="@return_to_end"]
L20 -> L21    [source="@current_to_next"]
L21 -> L22 [color=green] [fontcolor=green] [label="true"] [source="@if_to_next_node"]
L21 -> L26 [color=red] [fontcolor=red] [label="false"] [source="@if_to_next_sibling"]
L22 -> L23    [source="@current_to_next"]
L23 -> L999999    [source="@return_to_end"]
L26 -> L27    [source="@current_to_next"]
L27 -> L28 [color=green] [fontcolor=green] [label="true"] [source="@if_to_next_node"]
L27 -> L32 [color=red] [fontcolor=red] [label="false"] [source="@if_to_next_sibling"]
L28 -> L29    [source="@current_to_next"]
L29 -> L999999    [source="@return_to_end"]
L32 -> L33    [source="@current_to_next"]
L33 -> L34 [color=green] [fontcolor=green] [label="true"] [source="@if_to_next_node"]
L33 -> L38 [color=red] [fontcolor=red] [label="false"] [source="@if_to_next_sibling"]
L34 -> L35    [source="@current_to_next"]
L35 -> L999999    [source="@return_to_end"]
L38 -> L39    [source="@current_to_next"]
L39 -> L40 [color=green] [fontcolor=green] [label="true"] [source="@if_to_next_node"]
L39 -> L44 [color=red] [fontcolor=red] [label="false"] [source="@if_to_next_sibling"]
L40 -> L41    [source="@current_to_next"]
L41 -> L999999    [source="@return_to_end"]
L44 -> L45    [source="@current_to_next"]
L45 -> L46 [color=green] [fontcolor=green] [label="true"] [source="@if_to_next_node"]
L45 -> L50 [color=red] [fontcolor=red] [label="false"] [source="@if_to_next_sibling"]
L46 -> L47    [source="@current_to_next"]
L47 -> L999999    [source="@return_to_end"]
L50 -> L51    [source="@current_to_next"]
L51 -> L52 [color=green] [fontcolor=green] [label="true"] [source="@if_to_next_node"]
L51 -> L56 [color=red] [fontcolor=red] [label="false"] [source="@if_to_next_sibling"]
L52 -> L53    [source="@current_to_next"]
L53 -> L999999    [source="@return_to_end"]
L56 -> L57    [source="@current_to_next"]
L57 -> L58 [color=green] [fontcolor=green] [label="true"] [source="@if_to_next_node"]
L57 -> L61 [color=red] [fontcolor=red] [label="false"] [source="@if_to_next_sibling"]
L58 -> L59    [source="@current_to_next"]
L59 -> L999999    [source="@return_to_end"]
L61 -> L62    [source="@current_to_next"]
L62 -> L999999    [source="@return_to_end"]
}


}